/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IUnipilotInterface extends ethers.utils.Interface {
  functions: {
    "createPoolAndDeposit(tuple,bytes[2])": FunctionFragment;
    "deposit(tuple,bytes)": FunctionFragment;
    "exchangeManagerWhitelist(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "mintPilot(address,uint256)": FunctionFragment;
    "mintProxy()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPoolAndDeposit",
    values: [
      {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeManagerWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPilot",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintProxy", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createPoolAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeManagerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPilot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintProxy", data: BytesLike): Result;

  events: {
    "ExchangeStatus(address,bool)": EventFragment;
    "ExchangeWhitelisted(address)": EventFragment;
    "GovernanceUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
}

export class IUnipilot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUnipilotInterface;

  functions: {
    createPoolAndDeposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintProxy(overrides?: CallOverrides): Promise<[string]>;
  };

  createPoolAndDeposit(
    params: {
      recipient: string;
      exchangeManagerAddress: string;
      token0: string;
      token1: string;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      tokenId: BigNumberish;
    },
    data: [BytesLike, BytesLike],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    params: {
      recipient: string;
      exchangeManagerAddress: string;
      token0: string;
      token1: string;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      tokenId: BigNumberish;
    },
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeManagerWhitelist(
    exchange: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governance(overrides?: CallOverrides): Promise<string>;

  mintPilot(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintProxy(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createPoolAndDeposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: [BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0Added: BigNumber;
        amount1Added: BigNumber;
        mintedTokenId: BigNumber;
      }
    >;

    deposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Added: BigNumber;
        amount1Added: BigNumber;
      }
    >;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governance(overrides?: CallOverrides): Promise<string>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintProxy(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ExchangeStatus(
      exchange?: null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { exchange: string; status: boolean }
    >;

    ExchangeWhitelisted(
      newExchange?: null
    ): TypedEventFilter<[string], { newExchange: string }>;

    GovernanceUpdated(
      oldGovernance?: null,
      newGovernance?: null
    ): TypedEventFilter<
      [string, string],
      { oldGovernance: string; newGovernance: string }
    >;
  };

  estimateGas: {
    createPoolAndDeposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintProxy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPoolAndDeposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      params: {
        recipient: string;
        exchangeManagerAddress: string;
        token0: string;
        token1: string;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        tokenId: BigNumberish;
      },
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
