/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ILiquidityMigratorInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "LiquidityMigratedFromLixir(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityMigratedFromPopsicle(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityMigratedFromV2(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityMigratedFromV3(address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityMigratedFromVisor(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityMigratedFromLixir"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityMigratedFromPopsicle"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMigratedFromV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMigratedFromV3"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMigratedFromVisor"): EventFragment;
}

export class ILiquidityMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILiquidityMigratorInterface;

  functions: {};

  callStatic: {};

  filters: {
    LiquidityMigratedFromLixir(
      lixirVault?: null,
      unipilotVault?: null,
      owner?: null,
      unipilotId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        lixirVault: string;
        unipilotVault: string;
        owner: string;
        unipilotId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    LiquidityMigratedFromPopsicle(
      popsicleVault?: null,
      unipilotVault?: null,
      owner?: null,
      unipilotId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        popsicleVault: string;
        unipilotVault: string;
        owner: string;
        unipilotId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    LiquidityMigratedFromV2(
      pairV2?: null,
      unipilotVault?: null,
      owner?: null,
      unipilotId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        pairV2: string;
        unipilotVault: string;
        owner: string;
        unipilotId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    LiquidityMigratedFromV3(
      unipilotVault?: null,
      owner?: null,
      unipilotId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        unipilotVault: string;
        owner: string;
        unipilotId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    LiquidityMigratedFromVisor(
      hypervisor?: null,
      unipilotVault?: null,
      owner?: null,
      unipilotId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        hypervisor: string;
        unipilotVault: string;
        owner: string;
        unipilotId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
