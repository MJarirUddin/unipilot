/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SetupMockInterface extends ethers.utils.Interface {
  functions: {
    "details()": FunctionFragment;
    "governance()": FunctionFragment;
    "indexFund()": FunctionFragment;
    "initSetup()": FunctionFragment;
    "initTokens(address,address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "swap()": FunctionFragment;
    "swapAddr()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "tokens()": FunctionFragment;
    "ulm()": FunctionFragment;
    "ulmState()": FunctionFragment;
    "uniStrategy()": FunctionFragment;
    "unipilot()": FunctionFragment;
    "v3Factory()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "details", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "indexFund", values?: undefined): string;
  encodeFunctionData(functionFragment: "initSetup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "swap", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapAddr", values?: undefined): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "ulm", values?: undefined): string;
  encodeFunctionData(functionFragment: "ulmState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unipilot", values?: undefined): string;
  encodeFunctionData(functionFragment: "v3Factory", values?: undefined): string;

  decodeFunctionResult(functionFragment: "details", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indexFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initSetup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ulm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ulmState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unipilot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "v3Factory", data: BytesLike): Result;

  events: {};
}

export class SetupMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SetupMockInterface;

  functions: {
    details(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        swapPercentage: number;
        swapPriceThreshold: number;
        premium: BigNumber;
        gasPriceLimit: BigNumber;
        userPilotPercentage: BigNumber;
        feesPercentageIndexFund: BigNumber;
        pilotWethPair: string;
        oracle: string;
        indexFund: string;
        uniStrategy: string;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    indexFund(overrides?: CallOverrides): Promise<[string]>;

    initSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initTokens(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    swap(overrides?: CallOverrides): Promise<[string]>;

    swapAddr(overrides?: CallOverrides): Promise<[string]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    tokens(overrides?: CallOverrides): Promise<[string]>;

    ulm(overrides?: CallOverrides): Promise<[string]>;

    ulmState(overrides?: CallOverrides): Promise<[string]>;

    uniStrategy(overrides?: CallOverrides): Promise<[string]>;

    unipilot(overrides?: CallOverrides): Promise<[string]>;

    v3Factory(overrides?: CallOverrides): Promise<[string]>;
  };

  details(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string
    ] & {
      swapPercentage: number;
      swapPriceThreshold: number;
      premium: BigNumber;
      gasPriceLimit: BigNumber;
      userPilotPercentage: BigNumber;
      feesPercentageIndexFund: BigNumber;
      pilotWethPair: string;
      oracle: string;
      indexFund: string;
      uniStrategy: string;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  indexFund(overrides?: CallOverrides): Promise<string>;

  initSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initTokens(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  swap(overrides?: CallOverrides): Promise<string>;

  swapAddr(overrides?: CallOverrides): Promise<string>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  tokens(overrides?: CallOverrides): Promise<string>;

  ulm(overrides?: CallOverrides): Promise<string>;

  ulmState(overrides?: CallOverrides): Promise<string>;

  uniStrategy(overrides?: CallOverrides): Promise<string>;

  unipilot(overrides?: CallOverrides): Promise<string>;

  v3Factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    details(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        swapPercentage: number;
        swapPriceThreshold: number;
        premium: BigNumber;
        gasPriceLimit: BigNumber;
        userPilotPercentage: BigNumber;
        feesPercentageIndexFund: BigNumber;
        pilotWethPair: string;
        oracle: string;
        indexFund: string;
        uniStrategy: string;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    indexFund(overrides?: CallOverrides): Promise<string>;

    initSetup(overrides?: CallOverrides): Promise<void>;

    initTokens(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    swap(overrides?: CallOverrides): Promise<string>;

    swapAddr(overrides?: CallOverrides): Promise<string>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    tokens(overrides?: CallOverrides): Promise<string>;

    ulm(overrides?: CallOverrides): Promise<string>;

    ulmState(overrides?: CallOverrides): Promise<string>;

    uniStrategy(overrides?: CallOverrides): Promise<string>;

    unipilot(overrides?: CallOverrides): Promise<string>;

    v3Factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    details(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    indexFund(overrides?: CallOverrides): Promise<BigNumber>;

    initSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initTokens(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    swap(overrides?: CallOverrides): Promise<BigNumber>;

    swapAddr(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    ulm(overrides?: CallOverrides): Promise<BigNumber>;

    ulmState(overrides?: CallOverrides): Promise<BigNumber>;

    uniStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    unipilot(overrides?: CallOverrides): Promise<BigNumber>;

    v3Factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    details(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initTokens(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ulm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ulmState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unipilot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
