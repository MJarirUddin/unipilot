/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IUnipilotFarmInterface extends ethers.utils.Interface {
  functions: {
    "blacklistPools(address[])": FunctionFragment;
    "currentReward(uint256)": FunctionFragment;
    "depositNFT(uint256)": FunctionFragment;
    "initializer(address[],uint256[])": FunctionFragment;
    "nftStatus(uint256)": FunctionFragment;
    "toggleFarmingActive()": FunctionFragment;
    "toggleRewardStatus(address)": FunctionFragment;
    "totalUserNftWRTPool(address,address)": FunctionFragment;
    "updateMultiplier(address,uint256)": FunctionFragment;
    "updatePilotPerBlock(uint256)": FunctionFragment;
    "updateULM(address)": FunctionFragment;
    "withdrawNFT(uint256)": FunctionFragment;
    "withdrawReward(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blacklistPools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializer",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nftStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFarmingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleRewardStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserNftWRTPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePilotPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateULM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleFarmingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserNftWRTPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePilotPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateULM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "BlacklistPool(address,bool,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FarmingStatus(bool,bool,uint256)": EventFragment;
    "MigrateFunds(address,address,uint256)": EventFragment;
    "NewPool(address,uint256,uint256,uint256,bool)": EventFragment;
    "RewardStatus(address,bool,bool)": EventFragment;
    "UpdateActiveAlt(address,address,address)": EventFragment;
    "UpdateAltState(bool,bool,address)": EventFragment;
    "UpdateFarmingLimit(uint256,uint256)": EventFragment;
    "UpdateMultiplier(address,uint256,uint256)": EventFragment;
    "UpdatePilotPerBlock(address,uint256)": EventFragment;
    "UpdateULM(address,address,uint256)": EventFragment;
    "WithdrawNFT(address,address,uint256,uint256)": EventFragment;
    "WithdrawReward(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlacklistPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmingStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateActiveAlt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAltState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFarmingLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePilotPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateULM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawReward"): EventFragment;
}

export class IUnipilotFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUnipilotFarmInterface;

  functions: {
    blacklistPools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pilotReward: BigNumber;
        globalReward: BigNumber;
        globalAltReward: BigNumber;
        altReward: BigNumber;
      }
    >;

    depositNFT(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializer(
      pools: string[],
      _multipliers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftStatus(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toggleFarmingActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleRewardStatus(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalUserNftWRTPool(
      userAddress: string,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        tokenCount: BigNumber;
        tokenIds: BigNumber[];
      }
    >;

    updateMultiplier(
      pool: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePilotPerBlock(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateULM(
      _ULM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNFT(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  blacklistPools(
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentReward(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pilotReward: BigNumber;
      globalReward: BigNumber;
      globalAltReward: BigNumber;
      altReward: BigNumber;
    }
  >;

  depositNFT(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializer(
    pools: string[],
    _multipliers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftStatus(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  toggleFarmingActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleRewardStatus(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalUserNftWRTPool(
    userAddress: string,
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & { tokenCount: BigNumber; tokenIds: BigNumber[] }
  >;

  updateMultiplier(
    pool: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePilotPerBlock(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateULM(
    _ULM: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNFT(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawReward(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blacklistPools(pools: string[], overrides?: CallOverrides): Promise<void>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pilotReward: BigNumber;
        globalReward: BigNumber;
        globalAltReward: BigNumber;
        altReward: BigNumber;
      }
    >;

    depositNFT(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializer(
      pools: string[],
      _multipliers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    nftStatus(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toggleFarmingActive(overrides?: CallOverrides): Promise<void>;

    toggleRewardStatus(pool: string, overrides?: CallOverrides): Promise<void>;

    totalUserNftWRTPool(
      userAddress: string,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        tokenCount: BigNumber;
        tokenIds: BigNumber[];
      }
    >;

    updateMultiplier(
      pool: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePilotPerBlock(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateULM(_ULM: string, overrides?: CallOverrides): Promise<void>;

    withdrawNFT(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BlacklistPool(
      pool?: null,
      status?: null,
      time?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { pool: string; status: boolean; time: BigNumber }
    >;

    Deposit(
      pool?: null,
      tokenId?: null,
      liquidity?: null,
      totalSupply?: null,
      globalReward?: null,
      rewardMultiplier?: null,
      rewardPerBlock?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pool: string;
        tokenId: BigNumber;
        liquidity: BigNumber;
        totalSupply: BigNumber;
        globalReward: BigNumber;
        rewardMultiplier: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    FarmingStatus(
      old?: null,
      updated?: null,
      time?: null
    ): TypedEventFilter<
      [boolean, boolean, BigNumber],
      { old: boolean; updated: boolean; time: BigNumber }
    >;

    MigrateFunds(
      account?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; token: string; amount: BigNumber }
    >;

    NewPool(
      pool?: null,
      rewardPerBlock?: null,
      rewardMultiplier?: null,
      lastRewardBlock?: null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, boolean],
      {
        pool: string;
        rewardPerBlock: BigNumber;
        rewardMultiplier: BigNumber;
        lastRewardBlock: BigNumber;
        status: boolean;
      }
    >;

    RewardStatus(
      pool?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { pool: string; old: boolean; updated: boolean }
    >;

    UpdateActiveAlt(
      old?: null,
      updated?: null,
      pool?: null
    ): TypedEventFilter<
      [string, string, string],
      { old: string; updated: string; pool: string }
    >;

    UpdateAltState(
      old?: null,
      updated?: null,
      pool?: null
    ): TypedEventFilter<
      [boolean, boolean, string],
      { old: boolean; updated: boolean; pool: string }
    >;

    UpdateFarmingLimit(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    UpdateMultiplier(
      pool?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { pool: string; old: BigNumber; updated: BigNumber }
    >;

    UpdatePilotPerBlock(
      pool?: null,
      updated?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; updated: BigNumber }
    >;

    UpdateULM(
      oldAddress?: null,
      newAddress?: null,
      time?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oldAddress: string; newAddress: string; time: BigNumber }
    >;

    WithdrawNFT(
      pool?: null,
      userAddress?: null,
      tokenId?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        pool: string;
        userAddress: string;
        tokenId: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    WithdrawReward(
      pool?: null,
      tokenId?: null,
      liquidity?: null,
      reward?: null,
      globalReward?: null,
      totalSupply?: null,
      lastRewardTransferred?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pool: string;
        tokenId: BigNumber;
        liquidity: BigNumber;
        reward: BigNumber;
        globalReward: BigNumber;
        totalSupply: BigNumber;
        lastRewardTransferred: BigNumber;
      }
    >;
  };

  estimateGas: {
    blacklistPools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositNFT(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializer(
      pools: string[],
      _multipliers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftStatus(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleFarmingActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleRewardStatus(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalUserNftWRTPool(
      userAddress: string,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMultiplier(
      pool: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePilotPerBlock(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateULM(
      _ULM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNFT(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blacklistPools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositNFT(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializer(
      pools: string[],
      _multipliers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftStatus(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleFarmingActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleRewardStatus(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalUserNftWRTPool(
      userAddress: string,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      pool: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePilotPerBlock(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateULM(
      _ULM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
